//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions/GamplayActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamplayActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamplayActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamplayActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f39c11cd-39cc-4d24-b83a-7f9379a7f7bc"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""e26b65b6-1fbd-4336-83ac-de313587b9f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""aef0aeac-b2b3-4eac-84ba-c2aba978a422"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""1e07ce4d-9a78-48a9-978d-64543f3eed8f"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""2a5e160f-cf69-4945-9499-9ac927194ea2"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""5ce2cc52-b3b0-4717-b09a-e0a495cfe8c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0db667ce-f9ad-4088-9f56-e61a595140cb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e383838b-dcb6-4e44-bc2b-f7648c734709"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46e29326-97e8-4a97-b3b3-cdddf3300e38"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb46be9e-6fdc-4075-b839-07a14fce0c6d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""248b7fa0-00dd-46ff-bf3f-f46af6a02652"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay1"",
            ""id"": ""fd7a5942-3fe2-4d62-9439-42a3331082f5"",
            ""actions"": [
                {
                    ""name"": ""Swing"",
                    ""type"": ""Button"",
                    ""id"": ""2317711e-bac5-42e5-b42f-e93e0bb6e0cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""006c52d6-28a2-445d-8336-9020edade184"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""1008d458-5008-4f78-8b3b-ea5122891fd0"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grow"",
                    ""type"": ""Button"",
                    ""id"": ""bc743e69-72cc-4618-9b4e-a527d6fddb7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6aa86a8b-6868-4c16-bdad-0f38e999d502"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fe36f2f-d922-4684-a038-d49f61370840"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f34a2973-5cde-40d7-aae2-4db737398351"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a91c33d-1bfb-4a75-a429-eec06fbed171"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player1Input"",
            ""bindingGroup"": ""Player1Input"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Player2Input"",
            ""bindingGroup"": ""Player2Input"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Grab = m_Gameplay.FindAction("Grab", throwIfNotFound: true);
        m_Gameplay_Drop = m_Gameplay.FindAction("Drop", throwIfNotFound: true);
        m_Gameplay_Walk = m_Gameplay.FindAction("Walk", throwIfNotFound: true);
        m_Gameplay_Rotate = m_Gameplay.FindAction("Rotate", throwIfNotFound: true);
        m_Gameplay_Grow = m_Gameplay.FindAction("Grow", throwIfNotFound: true);
        // Gameplay1
        m_Gameplay1 = asset.FindActionMap("Gameplay1", throwIfNotFound: true);
        m_Gameplay1_Swing = m_Gameplay1.FindAction("Swing", throwIfNotFound: true);
        m_Gameplay1_Walk = m_Gameplay1.FindAction("Walk", throwIfNotFound: true);
        m_Gameplay1_Rotate = m_Gameplay1.FindAction("Rotate", throwIfNotFound: true);
        m_Gameplay1_Grow = m_Gameplay1.FindAction("Grow", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Grab;
    private readonly InputAction m_Gameplay_Drop;
    private readonly InputAction m_Gameplay_Walk;
    private readonly InputAction m_Gameplay_Rotate;
    private readonly InputAction m_Gameplay_Grow;
    public struct GameplayActions
    {
        private @GamplayActions m_Wrapper;
        public GameplayActions(@GamplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_Gameplay_Grab;
        public InputAction @Drop => m_Wrapper.m_Gameplay_Drop;
        public InputAction @Walk => m_Wrapper.m_Gameplay_Walk;
        public InputAction @Rotate => m_Wrapper.m_Gameplay_Rotate;
        public InputAction @Grow => m_Wrapper.m_Gameplay_Grow;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Grow.started += instance.OnGrow;
            @Grow.performed += instance.OnGrow;
            @Grow.canceled += instance.OnGrow;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Grow.started -= instance.OnGrow;
            @Grow.performed -= instance.OnGrow;
            @Grow.canceled -= instance.OnGrow;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Gameplay1
    private readonly InputActionMap m_Gameplay1;
    private List<IGameplay1Actions> m_Gameplay1ActionsCallbackInterfaces = new List<IGameplay1Actions>();
    private readonly InputAction m_Gameplay1_Swing;
    private readonly InputAction m_Gameplay1_Walk;
    private readonly InputAction m_Gameplay1_Rotate;
    private readonly InputAction m_Gameplay1_Grow;
    public struct Gameplay1Actions
    {
        private @GamplayActions m_Wrapper;
        public Gameplay1Actions(@GamplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Swing => m_Wrapper.m_Gameplay1_Swing;
        public InputAction @Walk => m_Wrapper.m_Gameplay1_Walk;
        public InputAction @Rotate => m_Wrapper.m_Gameplay1_Rotate;
        public InputAction @Grow => m_Wrapper.m_Gameplay1_Grow;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay1Actions set) { return set.Get(); }
        public void AddCallbacks(IGameplay1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay1ActionsCallbackInterfaces.Add(instance);
            @Swing.started += instance.OnSwing;
            @Swing.performed += instance.OnSwing;
            @Swing.canceled += instance.OnSwing;
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Grow.started += instance.OnGrow;
            @Grow.performed += instance.OnGrow;
            @Grow.canceled += instance.OnGrow;
        }

        private void UnregisterCallbacks(IGameplay1Actions instance)
        {
            @Swing.started -= instance.OnSwing;
            @Swing.performed -= instance.OnSwing;
            @Swing.canceled -= instance.OnSwing;
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Grow.started -= instance.OnGrow;
            @Grow.performed -= instance.OnGrow;
            @Grow.canceled -= instance.OnGrow;
        }

        public void RemoveCallbacks(IGameplay1Actions instance)
        {
            if (m_Wrapper.m_Gameplay1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay1Actions @Gameplay1 => new Gameplay1Actions(this);
    private int m_Player1InputSchemeIndex = -1;
    public InputControlScheme Player1InputScheme
    {
        get
        {
            if (m_Player1InputSchemeIndex == -1) m_Player1InputSchemeIndex = asset.FindControlSchemeIndex("Player1Input");
            return asset.controlSchemes[m_Player1InputSchemeIndex];
        }
    }
    private int m_Player2InputSchemeIndex = -1;
    public InputControlScheme Player2InputScheme
    {
        get
        {
            if (m_Player2InputSchemeIndex == -1) m_Player2InputSchemeIndex = asset.FindControlSchemeIndex("Player2Input");
            return asset.controlSchemes[m_Player2InputSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnGrow(InputAction.CallbackContext context);
    }
    public interface IGameplay1Actions
    {
        void OnSwing(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnGrow(InputAction.CallbackContext context);
    }
}
